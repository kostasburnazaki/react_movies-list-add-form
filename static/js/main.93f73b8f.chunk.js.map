{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","constants/LINK_REGEXP.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","label","required","initValue","approveField","editMovie","validHref","useState","Math","random","toString","slice","id","touched","setToched","value","setValue","hasError","htmlFor","classNames","type","placeholder","onChange","event","target","onBlur","isValid","pattern","NewMovie","onAdd","count","setCount","initialValidity","newMovie","setMovie","validity","setValidity","submitDisabled","setSubmit","newSet","validCount","Object","values","reduce","a","item","Number","useEffect","disabled","keys","length","test","onSubmit","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93f73b8f.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  label?: string,\n  required?: boolean,\n  initValue: string,\n  editMovie: (title: string, value: string) => void,\n  approveField?: (name: string, newSet: boolean) => void,\n  validHref?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  label = name,\n  required = false,\n  initValue,\n  approveField,\n  editMovie,\n  validHref,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const [value, setValue] = useState(initValue);\n  let hasError = touched && required && !value;\n\n  const onBlur = () => {\n    setToched(true);\n\n    if (validHref) {\n      hasError = !validHref(value);\n    }\n\n    const isValid = !hasError;\n\n    approveField?.(name, isValid);\n\n    if (isValid) {\n      editMovie(label, value);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => setValue(event.target.value)}\n          onBlur={onBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line max-len\nexport const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { pattern } from '../../constants/LINK_REGEXP';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  // Object that tracks all the required fields to be completed\n  const initialValidity = {\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  };\n\n  // initial value for all the fields\n  const initValue = '';\n\n  // movie object to edit and eventually add to the database\n  const newMovie: Movie = {\n    title: initValue,\n    description: initValue,\n    imgUrl: initValue,\n    imdbUrl: initValue,\n    imdbId: initValue,\n  };\n\n  const [movie, setMovie] = useState(newMovie);\n\n  const [validity, setValidity] = useState(initialValidity);\n\n  // trigger to enable submit button\n  const [submitDisabled, setSubmit] = useState(true);\n\n  // function to manipulate validity object above\n  const approveField = (title: string, newSet: boolean) => {\n    setValidity({ ...validity, [title]: newSet });\n  };\n\n  // count quantity of completed fields in validity object\n  const validCount\n    = Object.values(validity)\n      .reduce((a, item) => a + Number(item), 0);\n\n  // setting submit button accordingly to quantity of completed fields\n  useEffect(() => {\n    const disabled = validCount !== Object.keys(validity).length;\n\n    setSubmit(disabled);\n  }, [validCount]);\n\n  const editMovie = (title: string, value: string) => {\n    setMovie({ ...movie, [title]: value });\n  };\n\n  const onSubmit = () => {\n    setCount(count + 1);\n    onAdd(movie);\n    setMovie(newMovie);\n    setValidity(initialValidity);\n  };\n\n  const validHref = (value: string) => pattern.test(value);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={onSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        initValue={initValue}\n        approveField={approveField}\n        editMovie={editMovie}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        initValue={initValue}\n        editMovie={editMovie}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        initValue={initValue}\n        approveField={approveField}\n        editMovie={editMovie}\n        validHref={validHref}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        initValue={initValue}\n        approveField={approveField}\n        editMovie={editMovie}\n        validHref={validHref}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        initValue={initValue}\n        approveField={approveField}\n        editMovie={editMovie}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={submitDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}