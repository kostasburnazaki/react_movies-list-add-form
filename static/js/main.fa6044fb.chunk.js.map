{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","constants/validation.tsx","constants/initial-values.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","helpers/useValidation.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","LINK_REGEXP","initValid","initialValidity","initValue","newMovie","TextField","name","label","required","approveField","editMovie","useState","Math","random","toString","slice","id","isFieldCompleted","setFieldCompleted","value","setValue","hasError","useMemo","isEmpty","trim","validUrl","toLocaleLowerCase","includes","test","useEffect","htmlFor","classNames","type","placeholder","onChange","e","target","onBlur","onFocus","NewMovie","handleAddMovie","count","setCount","setMovie","validityData","setValidity","isSubmitDisabled","setSubmitDisabled","newSet","currentValidity","currentMovie","validCount","Object","values","reduce","sum","isValid","Number","disable","keys","length","useValidation","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa6044fb.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// eslint-disable-next-line max-len\nexport const LINK_REGEXP = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { Movie } from '../types/Movie';\n\nconst initValid = false;\n\nexport const initialValidity = {\n  title: initValid,\n  imgUrl: initValid,\n  imdbUrl: initValid,\n  imdbId: initValid,\n};\n\nexport const initValue = '';\n\nexport const newMovie: Movie = {\n  title: initValue,\n  description: initValue,\n  imgUrl: initValue,\n  imdbUrl: initValue,\n  imdbId: initValue,\n};\n","import classNames from 'classnames';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { LINK_REGEXP } from '../../constants/validation';\nimport { initValue } from '../../constants/initial-values';\n\ntype Props = {\n  name: string,\n  label?: string,\n  required?: boolean,\n  editMovie: (title: string, value: string) => void,\n  approveField?: (name: string, newSet: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  label = name,\n  required = false,\n  approveField,\n  editMovie,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [isFieldCompleted, setFieldCompleted] = useState(false);\n\n  const [value, setValue] = useState(initValue);\n\n  const hasError = useMemo(() => {\n    const isEmpty = required && !value.trim();\n\n    const validUrl = name.toLocaleLowerCase().includes('url')\n      ? LINK_REGEXP.test(value.trim())\n      : true;\n\n    return (isEmpty || !validUrl);\n  }, [value]);\n\n  useEffect(() => {\n    approveField?.(name, !hasError);\n\n    if (!hasError) {\n      editMovie(name, value);\n    }\n  }, [value]);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError && isFieldCompleted,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          onBlur={() => setFieldCompleted(true)}\n          onFocus={() => setFieldCompleted(false)}\n        />\n      </div>\n\n      {hasError && isFieldCompleted && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport useValidation from '../../helpers/useValidation';\nimport {\n  newMovie,\n  initialValidity,\n} from '../../constants/initial-values';\n\ntype Props = {\n  handleAddMovie: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ handleAddMovie }) => {\n  const [count, setCount] = useState(0);\n\n  const [movie, setMovie] = useState(newMovie);\n\n  const [validityData, setValidity] = useState(initialValidity);\n\n  const [isSubmitDisabled, setSubmitDisabled] = useState(true);\n\n  const approveField = (title: string, newSet: boolean) => {\n    setValidity(currentValidity => ({ ...currentValidity, [title]: newSet }));\n  };\n\n  const editMovie = (title: string, value: string) => {\n    setMovie(currentMovie => ({ ...currentMovie, [title]: value }));\n  };\n\n  useValidation(validityData, setSubmitDisabled);\n\n  const handleOnSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    handleAddMovie(movie);\n    setCount((currentCount) => currentCount + 1);\n    setMovie(newMovie);\n    setValidity(initialValidity);\n    setSubmitDisabled(true);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleOnSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        approveField={approveField}\n        editMovie={editMovie}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        editMovie={editMovie}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        approveField={approveField}\n        editMovie={editMovie}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        approveField={approveField}\n        editMovie={editMovie}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        approveField={approveField}\n        editMovie={editMovie}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isSubmitDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable no-console */\nimport { useEffect } from 'react';\nimport { Validity } from '../types/Validity';\n\nexport default function useValidation(\n  validityData: Validity, setSubmitDisabled: (status: boolean) => void,\n) {\n  const validCount\n    = Object.values(validityData)\n      .reduce((sum: number, isValid) => sum + Number(isValid), 0);\n\n  useEffect(() => {\n    const disable = validCount !== Object.keys(validityData).length;\n\n    setSubmitDisabled(disable);\n  }, [validCount]);\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const handleAddMovie = (movie: Movie) => {\n    setMovies((currentMovies) => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie handleAddMovie={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}